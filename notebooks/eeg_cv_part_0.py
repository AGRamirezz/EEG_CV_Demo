# -*- coding: utf-8 -*-
"""EEG_CV_Part_0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jfAtkz90mja3ck7db3mug1WFoUcOda34

# Brain Data Preparation for Deep Learning

This notebook outlines the steps of how to unpack Electroencephalography (EEG) data into easy to work with Numpy arrays. EEG data can often be found as .mat files because Neuroscience researchers regularly use Matlab. Not everyone has access or a subscription to that platform so finding ways to port that data into Python is of importance. Sometimes that process is not as straightforward as loading in one file extension and converting it into a desired one. Here, the notebook will make it simple to converting the data into something that is ready for a deep learning modeling procedure.

## Initialize Notebook
"""

# Import needed libraries
import numpy as np
import os
from scipy.io import loadmat
import matplotlib.pyplot as plt
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Load and Unpack Data into Numpy
def load_eeg_data(path):
    os.chdir(path)
    files = sorted(os.listdir(os.getcwd()))
    print('File Names', files)
    
    eeg = [loadmat(file) for file in files]
    print(eeg[0].keys())
    
    val_keys = [list(eeg[i].keys())[3] for i in range(len(files))]
    print(val_keys)
    
    eeg_data = [eeg[i][val_keys[i]] for i in range(len(eeg))]
    print(eeg_data[0].shape)
    
    return eeg_data

def process_eeg_data(eeg_data, participants=20, stop=125*4*60):
    X4min = []
    for data in eeg_data:
        x = np.transpose(data)
        X4min.extend(x[j][0:stop] for j in range(participants))
    X4min = np.array(X4min)
    print(X4min.shape)
    return X4min

path = '/content/drive/My Drive/My/Path/'  # Update with your path
eeg_data = load_eeg_data(path)
X4min = process_eeg_data(eeg_data)

# Organize Data
def split_chunks(X4min, sr=125, chunk_sec=15):
    samp = sr * chunk_sec
    chunks = [X4min[:, i*samp:(i+1)*samp] for i in range(16)]
    return chunks

def create_datasets(chunks):
    X_train = np.concatenate([chunks[i] for i in [0, 4, 8, 12, 3, 7, 11, 15]])
    X_val = np.concatenate([chunks[i] for i in [1, 5, 9, 13]])
    X_test = np.concatenate([chunks[i] for i in [2, 6, 10, 14]])
    return X_train, X_val, X_test

def reshape_data(X, chunk_sec=15):
    blen = X.shape[1] // chunk_sec
    X = np.array([np.split(x, chunk_sec) for x in X])
    X = np.reshape(X, (len(X) * chunk_sec, blen, 125, 1))
    return X

chunks = split_chunks(X4min)
X_train, X_val, X_test = create_datasets(chunks)
X_train = reshape_data(X_train)
X_val = reshape_data(X_val)
X_test = reshape_data(X_test)

print(X_train.shape, X_val.shape, X_test.shape)

# Plot Data
def plot_eeg_data(X4min, index=4):
    x = X4min[index]
    fig, ax = plt.subplots(dpi=150)
    plt.plot(x[0:7500, 0], color='blue')
    plt.show()

plot_eeg_data(X4min)

# Install aesthetic plotting package
!pip install vapeplot
import vapeplot

def plot_with_vapeplot(X_train, index=10, palette='vaporwave'):
    vapeplot.set_palette(palette)
    x = np.reshape(X_train[index], (125, 125))
    plt.figure(dpi=150)
    plt.plot(x, linewidth=.85)
    plt.show()

    font = {'family': 'Verdana', 'color': 'black', 'size': 13}
    x2 = x.T
    plt.yticks([0.5, 25.5, 50.5, 75.5, 100.5, 124.5], ['125', '100', '75', '50', '25', '1'])
    plt.xticks([0.5, 25.5, 50.5, 75.5, 100.5, 124.5], ['1', '25', '50', '75', '100', '125'])
    plt.imshow(x2, cmap='Greys', interpolation='nearest')
    plt.ylabel('Channels', fontdict=font, labelpad=16)
    plt.xlabel('Samples', fontdict=font, labelpad=16)
    plt.show()

plot_with_vapeplot(X_train)











